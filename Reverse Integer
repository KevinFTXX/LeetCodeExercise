'''
Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

click to show spoilers.

Have you thought about this?
Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!

If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.

Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?

For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
'''


class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        # Consider positive and negative situation
        
        flag = 0
        if x < 0:
            flag = -1
        else:
            flag = 1
        x *= flag  # find absolute value of x
        x = str(x) # make x into a string
        x = x[::-1] # reverse the string
        x = int(x) # make string back to integer
        if x > 2147483647: # check if the string overflow
            return 0
        else:
            return flag*x
            
'''
The above code is kind of cheating, since it change an integer to a string and just reverse the string. The following one is more mathematical
'''


class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        # Consider positive and negative situation
        flag = 0
        if x < 0:
            flag = -1
        else:
            flag = 1
        x *= flag
        result = 0
        while x:
            result = result * 10 + x % 10  # x module 10 will get the last digit of x
            x = x // 10  # then shrink x by 10, use floor division
        if result > 2147483647:
            return 0
        else:
            return result * flag
        
