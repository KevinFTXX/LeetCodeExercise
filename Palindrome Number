'''
Determine whether an integer is a palindrome. Do this without extra space.

click to show spoilers.

Some hints:
Could negative integers be palindromes? (ie, -1)

If you are thinking of converting the integer to string, note the restriction of using extra space.

You could also try reversing an integer. However, if you have solved the problem "Reverse Integer", you know that the reversed integer might overflow. How would you handle such case?

There is a more generic way of solving this problem.
Palindrome 回文数, 12321, read from left or right is the same
'''

def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if (abs(x) > 0x7FFFFFFF) | (x<0):   # check if the number is too big or if it is negative, but I still don't know why use 0x7FFFFFFF (hex) rather than just use real big numbers
            return False
        elif (x!=0) & ((x%10)==0):  # if a number ends with 0 and this number is not 0, then it is not a Palindrome
            return False
        else: 
            x = str(x) # make x into a string # change the number to string
            y = x[::-1] # reverse the string # reverse the string 
            if x==y: # check if the reversed one equal to the original one, if yes, then it is a Palindrome number
                return True
            else:
                return False
                
'''
The above one is stil using the idea of convert number to string, there is a short way, ideally, is the same as this one
'''
def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x < 0:
           return False
        else:
           return x == int(str(x)[::-1])   # but some one says this still use extra space, I don't know how to check whether a algorithm use extra space
